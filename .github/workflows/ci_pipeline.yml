name: Continuous Integration Pipeline

on:
  push:

  pull_request:
    types:
      - opened
      - synchronize
      - reopened

  workflow_dispatch:
    inputs:
      edc-api-manual:
        description: 'Is app [edc-api] affected?'
        required: false
        type: boolean
        default: false

      edc-ui-ng-manual:
        description: 'Is app [edc-ui-ng] affected?'
        required: false
        type: boolean
        default: false

permissions:
  actions: read
  attestations: read
  checks: read
  contents: read
  deployments: read
  id-token: none
  issues: write
  discussions: read
  packages: read
  pages: read
  pull-requests: write
  repository-projects: read
  security-events: read
  statuses: read

jobs:
  build:
    name: 'Build all projects'

    runs-on: ubuntu-latest

    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 #v5.0.0
        with:
          fetch-depth: 0

      - name: 'Fetch default branch'
        run: git fetch origin main

      - name: 'Setup Node.js environment'
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 #v5.0.0
        with:
          node-version-file: '.nvmrc'

      - name: 'Install dependencies (via npm)'
        shell: bash
        run: npm install

      - name: 'Extract branch name'
        id: extract-branch
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "nxBase=${{ github.event.pull_request.base.ref }}" >> $GITHUB_OUTPUT
          else
              echo "nxBase=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}~1" >> $GITHUB_OUTPUT
          fi

          echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT

      - name: 'Get affected apps'
        id: check-affected-apps
        env:
          headSha: ${{ github.sha }}
          nxBase: ${{ steps.extract-branch.outputs.nxBase }}
          branch: ${{ steps.extract-branch.outputs.branch }}
        shell: bash
        run: |
          git fetch origin $branch
          output=$(npx nx show projects --affected --type app --base=remotes/origin/$nxBase --head=$headSha --json)
          affected=$(echo "$output" | yq eval 'select(. != null)' -)
          echo "affected=${affected}" >> $GITHUB_OUTPUT

      - name: 'Get affected libs'
        id: check-affected-libs
        env:
          headSha: ${{ github.sha }}
          nxBase: ${{ steps.extract-branch.outputs.nxBase }}
          branch: ${{ steps.extract-branch.outputs.branch }}
        shell: bash
        run: |
          git fetch origin $branch
          output=$(npx nx show projects --affected --type lib --base=remotes/origin/$nxBase --head=$headSha --json)
          affected=$(echo "$output" | yq eval 'select(. != null)' -)
          echo "affected=${affected}" >> $GITHUB_OUTPUT

      - name: 'Get affected e2e'
        id: check-affected-e2e
        env:
          headSha: ${{ github.sha }}
          nxBase: ${{ steps.extract-branch.outputs.nxBase }}
          branch: ${{ steps.extract-branch.outputs.branch }}
        shell: bash
        run: |
          git fetch origin $branch
          output=$(npx nx show projects --affected --type e2e --base=remotes/origin/$nxBase --head=$headSha --json)
          affected=$(echo "$output" | yq eval 'select(. != null)' -)
          echo "affected=${affected}" >> $GITHUB_OUTPUT

      - name: 'Print outputs'
        shell: bash
        run: |
          echo "Event information"
          echo "Event name: ${{ github.event_name }}"
          echo "Event Action: ${{ github.event.action }}"
          echo ""
          echo "Git information"
          echo "Target branch: ${{ steps.extract-branch.outputs.branch }}"
          echo "Base branch: ${{ steps.extract-branch.outputs.nxBase }}"
          echo ""
          echo "Affected projects detected by Nx Tooling"
          echo "Affected apps: ${{ steps.check-affected-apps.outputs.affected }}"
          echo "Affected libs: ${{ steps.check-affected-libs.outputs.affected }}"
          echo "Affected e2e: ${{ steps.check-affected-e2e.outputs.affected }}"
          echo ""
          echo "Triggered manually (from workflow inputs)"
          echo "Is app [edc-api] affected? ${{ inputs.edc-api-manual }}"
          echo "Is app [edc-ui-ng] affected? ${{ inputs.edc-ui-ng-manual }}"

      - name: 'Build all projects'
        run: npx nx run-many --parallel --target=build

      - name: 'Check Linting status of affected projects'
        run: npm run lint:affected:check

      - name: 'Run all tests of affected projects'
        run: npm run test:affected

      - name: 'Merge Coverage Results'
        run: |
          if ls coverage/apps/*/lcov.info 1> /dev/null 2>&1; then
            npm run coverage:merge
          else
            echo "No coverage files found to merge"
          fi

  sonarcloud:
    name: 'Static code checks'

    runs-on: ubuntu-latest

    if: github.actor != 'dependabot[bot]'

    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 #v5.0.0
        with:
          fetch-depth: 0

      - name: 'Run static code checks on `sonarcloud.io`'
        uses: SonarSource/sonarqube-scan-action@fd88b7d7ccbaefd23d8f36f73b59db7a3d246602 #v6.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
